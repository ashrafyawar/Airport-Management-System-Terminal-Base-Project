Index: src/Airline/AirlineSystemStorage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Airline;\r\nimport DataStructures.MapGraph;\r\n\r\nimport java.util.*;\r\n\r\npublic class AirlineSystemStorage {\r\n\r\n\r\n    /**\r\n     * aircraft counter.\r\n     */\r\n    int aircraft_counter;\r\n\r\n    /**\r\n     * Increment aircraft counter.\r\n     * @return\r\n     */\r\n    public int increment_Aircraft_counter() {\r\n        return ++aircraft_counter;\r\n    }\r\n\r\n    /**\r\n     * General Airlien System Storage.\r\n     * @param admin admin of airline.\r\n     * @param nameOfTrademarkAsIdentifier trademark of airline.\r\n     * @param uaid_key UADI_key of airline.\r\n     * @param ways ways\r\n     * @param dests dests\r\n     */\r\n    public AirlineSystemStorage( AirlineAdmin admin , String nameOfTrademarkAsIdentifier , final String uaid_key , MapGraph ways , ArrayList<Destination> dests)  {\r\n\r\n        this.admin = admin;\r\n        aircraft_counter = 0;\r\n\r\n        mapOfTicket = new HashMap<Integer , Ticket>();\r\n        pilots = new LinkedList<AirlinePersonnel>();\r\n        cabin_crew = new LinkedList<AirlinePersonnel>();\r\n        listOfAirCraft = new ArrayList<Aircraft>();\r\n        listOfFlight = new ArrayList<Flight>();\r\n\r\n\r\n        this.UAID_KEY = uaid_key;\r\n        this.nameOfTrademarkAsIdentifier = nameOfTrademarkAsIdentifier;\r\n\r\n        this.ways = ways;\r\n        this.dests = dests;\r\n    }\r\n\r\n    /**\r\n     * Vertex of dest.\r\n     */\r\n    public ArrayList<Destination> dests;\r\n\r\n    /**\r\n     * Trademark of airline.\r\n     */\r\n    private String nameOfTrademarkAsIdentifier;\r\n\r\n    /**\r\n     * MapGraph of destinations.\r\n     * */\r\n    public MapGraph ways;\r\n\r\n    /**\r\n     * <p> Unique Airline Identifier Key. </p>\r\n     * <p> Each airline company has matchless one for each Airport.</p>\r\n     */\r\n    private final transient String UAID_KEY;\r\n\r\n    /**\r\n     * List of flight.\r\n     */\r\n    private ArrayList<Flight> listOfFlight;\r\n\r\n    /**\r\n     * Map of ticket.\r\n     */\r\n    private Map<Integer,Ticket>           mapOfTicket;\r\n\r\n    /**\r\n     * List of pilots.\r\n     */\r\n    private Queue<AirlinePersonnel>       pilots;\r\n\r\n    /**\r\n     * List of cabin_crew.\r\n     */\r\n    private Queue<AirlinePersonnel>       cabin_crew;\r\n\r\n\r\n    /**\r\n     * List of admin.\r\n     */\r\n    private AirlineAdmin admin;\r\n\r\n\r\n    /**\r\n     * Aircraft Container.\r\n     */\r\n    private ArrayList< Aircraft >   listOfAirCraft;\r\n\r\n\r\n    /*------------------------------------------ Getters -------------------------------------*/\r\n\r\n\r\n\r\n    /**\r\n     * Get aircraft List\r\n     * @return list of aircraft.\r\n     */\r\n    public ArrayList<Aircraft> getListOfAirCraft() {\r\n        return listOfAirCraft;\r\n    }\r\n\r\n\r\n    /**\r\n     * Ticket container.\r\n     * @return Ticket container.\r\n     */\r\n    public Map<Integer,Ticket> getMapOfTicket() {\r\n        return mapOfTicket;\r\n    }\r\n\r\n    /**\r\n     * Aircraft counter.\r\n     * @return Aircraft counter.\r\n     */\r\n    public int getAircraftCounter() {\r\n        return aircraft_counter;\r\n    }\r\n\r\n\r\n    /**\r\n     * Pilots Queue.\r\n     * @return Pilot Queue.\r\n     */\r\n    public Queue<AirlinePersonnel> getPilots() {\r\n        return pilots;\r\n    }\r\n\r\n    /**\r\n     * CabinCrew Queue.\r\n     * @return CabinCrew Queue..\r\n     */\r\n    public Queue<AirlinePersonnel> getCabin_crew() {\r\n        return cabin_crew;\r\n    }\r\n\r\n    /**\r\n     * List of flight.\r\n     * @return List of flight.\r\n     */\r\n    public ArrayList<Flight> getListOfFlight() {\r\n        return listOfFlight;\r\n    }\r\n\r\n    /**\r\n     * Name of trademark.\r\n     * @return Name of trademark.\r\n     */\r\n    public String getNameOfTrademarkAsIdentifier() {\r\n        return nameOfTrademarkAsIdentifier;\r\n    }\r\n\r\n    /**\r\n     * UAID_KEY\r\n     * @return UAID_KEY\r\n     */\r\n    public String getUAID_KEY() {\r\n        return UAID_KEY;\r\n    }\r\n\r\n    /**\r\n     * Set name of identifier.\r\n     * @param nameOfTrademarkAsIdentifier\r\n     */\r\n    public void setNameOfTrademarkAsIdentifier(String nameOfTrademarkAsIdentifier) {\r\n        this.nameOfTrademarkAsIdentifier = nameOfTrademarkAsIdentifier;\r\n    }\r\n\r\n    /**\r\n     * Retrun airport admin.\r\n     * @return Retrun airport admin.\r\n     */\r\n    public AirlineAdmin getAdmin() {\r\n        return admin;\r\n    }\r\n\r\n    public ArrayList<Destination> getListOfDestination(){\r\n        return dests;\r\n    }\r\n\r\n    /** Overall menu to change password for User type UI\r\n     * @param in Scanner (must be System.in)\r\n     * @return new Password.\r\n     */\r\n    public String changePasswordwithMenu( Scanner in ) {\r\n\r\n        System.out.print(\"Enter the new password : \");\r\n        String password = in.nextLine();\r\n        while ( password == null || password.equals(\"\") ) {\r\n            System.out.print(\"Enter the new password : \");\r\n            password = in.nextLine();\r\n        }\r\n        return password;\r\n\r\n    }\r\n    \r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Airline/AirlineSystemStorage.java	(revision 56fd7a2287c9be165c664bc4c0c65bf6b329b0f5)
+++ src/Airline/AirlineSystemStorage.java	(date 1593018969766)
@@ -23,11 +23,10 @@
      * General Airlien System Storage.
      * @param admin admin of airline.
      * @param nameOfTrademarkAsIdentifier trademark of airline.
-     * @param uaid_key UADI_key of airline.
      * @param ways ways
      * @param dests dests
      */
-    public AirlineSystemStorage( AirlineAdmin admin , String nameOfTrademarkAsIdentifier , final String uaid_key , MapGraph ways , ArrayList<Destination> dests)  {
+    public AirlineSystemStorage( AirlineAdmin admin , String nameOfTrademarkAsIdentifier , MapGraph ways , ArrayList<Destination> dests)  {
 
         this.admin = admin;
         aircraft_counter = 0;
@@ -39,7 +38,6 @@
         listOfFlight = new ArrayList<Flight>();
 
 
-        this.UAID_KEY = uaid_key;
         this.nameOfTrademarkAsIdentifier = nameOfTrademarkAsIdentifier;
 
         this.ways = ways;
@@ -61,12 +59,6 @@
      * */
     public MapGraph ways;
 
-    /**
-     * <p> Unique Airline Identifier Key. </p>
-     * <p> Each airline company has matchless one for each Airport.</p>
-     */
-    private final transient String UAID_KEY;
-
     /**
      * List of flight.
      */
@@ -162,14 +154,6 @@
         return nameOfTrademarkAsIdentifier;
     }
 
-    /**
-     * UAID_KEY
-     * @return UAID_KEY
-     */
-    public String getUAID_KEY() {
-        return UAID_KEY;
-    }
-
     /**
      * Set name of identifier.
      * @param nameOfTrademarkAsIdentifier
Index: src/Airline/Airline.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Airline;\r\n\r\nimport Airport.AirportSystemStorage;\r\nimport Airport.Customer;\r\nimport DataStructures.MapGraph;\r\nimport java.util.ArrayList;\r\nimport java.util.Queue;\r\n\r\n/**\r\n * Airline management class.\r\n * @author Nevzat Seferoglu and Bilal Bayrakdar\r\n * @version 1.5\r\n */\r\npublic class Airline {\r\n\r\n    /**\r\n     * Current airport.\r\n     */\r\n    Destination localAirport;\r\n\r\n    /**\r\n     * General data storage of airline\r\n     */\r\n    private final AirlineSystemStorage airlineSystemStorage;\r\n\r\n    private final AirportSystemStorage airportSystemStorage;\r\n\r\n    /**\r\n     * Local commition rate.\r\n     */\r\n    private double commissionRate;\r\n\r\n    /**\r\n     * Get pilots.\r\n     * @return pilots container.\r\n     */\r\n    public Queue<AirlinePersonnel> getPilots() {\r\n        return airlineSystemStorage.getPilots();\r\n    }\r\n\r\n    /**\r\n     * Get CabinCrew.\r\n     * @return CabinCrew container.\r\n     */\r\n    public Queue<AirlinePersonnel> getCabinCrew() {\r\n        return airlineSystemStorage.getCabin_crew();\r\n    }\r\n\r\n    /**\r\n     * Get admin.\r\n     * @return admin container.\r\n     */\r\n    public AirlineAdmin getAdmin() {\r\n        return airlineSystemStorage.getAdmin();\r\n    }\r\n\r\n\r\n    public Airline(Destination localAirport, double commissionRate, AirlineAdmin admin, String nameOfTrademarkAsIdentifier, final String uaid_key,\r\n                   MapGraph ways, ArrayList<Destination> dests, AirportSystemStorage airportSystemStorage) {\r\n\r\n        this.localAirport = localAirport;\r\n        this.airportSystemStorage = airportSystemStorage;\r\n        airlineSystemStorage = new AirlineSystemStorage(admin,nameOfTrademarkAsIdentifier,uaid_key,ways,dests);\r\n        this.commissionRate = commissionRate;\r\n\r\n    }\r\n\r\n    /**\r\n     * Create ticket\r\n     * @param customer customer.\r\n     * @param flight flight.\r\n     * @return new ticket included pnr.\r\n     * @throws Exception\r\n     */\r\n    public Ticket createTicket(Customer customer,Flight flight) throws Exception {\r\n        if(flight.isTicketAble())\r\n            return new Ticket(flight,customer,airlineSystemStorage);\r\n        else\r\n            throw(new Exception(\"Choosen filght's tickets are currently unavailable! \"));\r\n    }\r\n\r\n    /**\r\n     * Delete existing ticket.\r\n     * @param ticket ticket.\r\n     */\r\n    public void deleteticket(Ticket ticket){\r\n        ticket.deleteTicket();\r\n    }\r\n\r\n    /**\r\n     * General airline system storage.\r\n     * @return\r\n     */\r\n    public AirlineSystemStorage getAirlineSystemStorage() {\r\n        return airlineSystemStorage;\r\n    }\r\n\r\n    /**\r\n     * Set commission rate.\r\n     * @param commissionRate commission rate.\r\n     * @throws Exception\r\n     */\r\n    public void setCommissionRate( double commissionRate ) throws Exception {\r\n        if( commissionRate < 0 ) {\r\n            throw new Exception(\"CommissionRate cannot be negative.\");\r\n        }\r\n\r\n        this.commissionRate = commissionRate;\r\n    }\r\n\r\n    /**\r\n     * Return UAID key.\r\n     * @return UAID key.\r\n     */\r\n    public String getUAID_KEY(){\r\n        return airlineSystemStorage.getUAID_KEY();\r\n    }\r\n\r\n    /**\r\n     * Return AirlineAdmin with SSN.\r\n     * @param SSN SSN.\r\n     * @return airline admin exists with matching SSN otherwise return null.\r\n     * @throws Exception\r\n     */\r\n    public AirlineAdmin getAdminWithSSN(String SSN){\r\n        if(getAdmin().getSSN().equals(SSN))\r\n            return getAdmin();\r\n        else\r\n            return null;\r\n    }\r\n\r\n    /**\r\n     * Return airline personnel with SSN.\r\n     * @param SSN SSN.\r\n     * @return airline personnel exists with matching SSN otherwise return null.\r\n     * @throws Exception\r\n     */\r\n    public AirlinePersonnel getPersonWithSSN(String SSN){\r\n        for(AirlinePersonnel ele:airlineSystemStorage.getPilots()){\r\n            if(ele.getSSN().equals(SSN))\r\n                return ele;\r\n        }\r\n        for(AirlinePersonnel ele: airlineSystemStorage.getCabin_crew()){\r\n            if(ele.getSSN().equals(SSN))\r\n                return ele;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Return commition rate.\r\n     * @return commition rate.\r\n     */\r\n    public double getCommissionRate() {\r\n        return commissionRate;\r\n    }\r\n\r\n    /**\r\n     * Return local airport.\r\n     * @return local airport.\r\n     */\r\n    public Destination getLocalAirport() {\r\n        return localAirport;\r\n    }\r\n\r\n    public AirportSystemStorage getAirportSystemStorage() {\r\n        return airportSystemStorage;\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return super.toString();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Airline/Airline.java	(revision 56fd7a2287c9be165c664bc4c0c65bf6b329b0f5)
+++ src/Airline/Airline.java	(date 1593019163057)
@@ -1,8 +1,11 @@
 package Airline;
 
+import Airport.Airport;
 import Airport.AirportSystemStorage;
 import Airport.Customer;
 import DataStructures.MapGraph;
+
+import java.lang.annotation.Retention;
 import java.util.ArrayList;
 import java.util.Queue;
 
@@ -55,12 +58,11 @@
     }
 
 
-    public Airline(Destination localAirport, double commissionRate, AirlineAdmin admin, String nameOfTrademarkAsIdentifier, final String uaid_key,
-                   MapGraph ways, ArrayList<Destination> dests, AirportSystemStorage airportSystemStorage) {
+    public Airline(Destination localAirport, double commissionRate, AirlineAdmin admin, String nameOfTrademarkAsIdentifier, MapGraph ways, ArrayList<Destination> dests, AirportSystemStorage airportSystemStorage) {
 
         this.localAirport = localAirport;
         this.airportSystemStorage = airportSystemStorage;
-        airlineSystemStorage = new AirlineSystemStorage(admin,nameOfTrademarkAsIdentifier,uaid_key,ways,dests);
+        airlineSystemStorage = new AirlineSystemStorage(admin,nameOfTrademarkAsIdentifier,ways,dests);
         this.commissionRate = commissionRate;
 
     }
@@ -108,13 +110,6 @@
         this.commissionRate = commissionRate;
     }
 
-    /**
-     * Return UAID key.
-     * @return UAID key.
-     */
-    public String getUAID_KEY(){
-        return airlineSystemStorage.getUAID_KEY();
-    }
 
     /**
      * Return AirlineAdmin with SSN.
@@ -167,6 +162,18 @@
         return airportSystemStorage;
     }
 
+    public String getNameofTradeMark(){
+        return airlineSystemStorage.getNameOfTrademarkAsIdentifier();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if(obj instanceof Airline)
+            return getNameofTradeMark().equals(((Airline) obj).getNameofTradeMark());
+        else
+            return false;
+    }
+
     @Override
     public String toString() {
         return super.toString();
Index: src/Airline/AirlineAdmin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Airline;\r\n\r\nimport Airport.AirportSystemStorage;\r\nimport Client.UserInterface;\r\nimport Client.User;\r\nimport java.util.*;\r\n\r\npublic class AirlineAdmin extends User implements AirlineAdminDomain , UserInterface {\r\n\r\n    AirlineSystemStorage airlineSystemStorage;\r\n\r\n    public AirlineAdmin( String name , String surname , AirlineSystemStorage airlineSystemStorage ) throws Exception {\r\n\r\n        super( name , surname );\r\n        if( airlineSystemStorage == null ) {\r\n            throw new Exception(\"AirlineSystemStorage cannot be null.\");\r\n        }\r\n        this.airlineSystemStorage = airlineSystemStorage;\r\n    }\r\n\r\n    public void menu(){\r\n\r\n        int choice;\r\n        Scanner in = new Scanner(System.in);\r\n        boolean loop = true;\r\n\r\n        while(loop){\r\n\r\n            System.out.printf(\"1- Recruit Personnel.\\n\");\r\n            System.out.printf(\"2- Dismiss Personnel\\n\");\r\n            System.out.printf(\"3- Add Destination.\\n\");\r\n            System.out.printf(\"4- Remove Destination.\\n\");\r\n            System.out.printf(\"5- Add Aircraft.\\n\");\r\n            System.out.printf(\"6- Remove Aircraft\\n\");\r\n            System.out.printf(\"7- Add Flight.\\n\");\r\n            System.out.printf(\"8- Remove Flight.\\n\");\r\n            System.out.printf(\"9 -Exit from administration page.\\n\");\r\n\r\n            choice = in.nextInt();\r\n\r\n            switch (choice){\r\n                case 1:\r\n                    System.out.print(\"Please enter personnel name: \");\r\n                    String perName = in.nextLine();\r\n                    System.out.print(\"Please enter personnel surname: \");\r\n                    String perSurname = in.nextLine();\r\n                    System.out.print(\"Please enter an SSN: \");\r\n                    String perSSN = in.nextLine();\r\n                    System.out.println(\"Please enter a password: \");\r\n                    String perPass = in.nextLine();\r\n                    if(perName != null && perSurname!=null && !perName.equals(\"\") && !perSurname.equals(\"\")&& )\r\n                        AirlinePersonnel airlinePersonnel = new(perName,perSurname,)\r\n\r\n\r\n                    recruitPersonnel();\r\n                    break;\r\n                case 2:\r\n                    break;\r\n                case 3:\r\n                    break;\r\n                case 4:\r\n                    break;\r\n                case 5:\r\n                    break;\r\n                case 6:\r\n                    break;\r\n                case 7:\r\n                    break;\r\n                case 8:\r\n                    break;\r\n                case 9: loop = false;\r\n                    break;\r\n                default: System.out.printf(\"Error. Your input is invalid..\\n\");\r\n\r\n            }\r\n        }\r\n        System.out.printf(\"Exiting...\\n\");\r\n    }\r\n\r\n    public boolean dismissPersonnel( AirlinePersonnel airlinePersonnel ) throws Exception {\r\n\r\n        if( airlinePersonnel == null ) {\r\n            throw new Exception(\"AirlinePersonnel cannot be null.\");\r\n        }\r\n\r\n        if( !(airlineSystemStorage.getCabin_crew().contains( airlinePersonnel ) ||\r\n                airlineSystemStorage.getPilots().contains( airlinePersonnel )) ) {\r\n            return false;\r\n        }\r\n\r\n        if( airlinePersonnel.isPilot ) {\r\n\r\n            try {\r\n                airlineSystemStorage.getPilots().remove(airlinePersonnel);\r\n            }\r\n            catch ( Throwable t ) {\r\n                return false;\r\n            }\r\n        } else {\r\n            try {\r\n                airlineSystemStorage.getCabin_crew().remove(airlinePersonnel);\r\n            }\r\n            catch ( Throwable t ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean recruitPersonnel( AirlinePersonnel airlinePersonnel ) throws Exception {\r\n\r\n        if( airlinePersonnel == null ) {\r\n            throw new Exception(\"AirlinePersonnel cannot be null.\");\r\n        }\r\n\r\n        if( airlineSystemStorage.getCabin_crew().contains( airlinePersonnel ) ||\r\n                airlineSystemStorage.getPilots().contains( airlinePersonnel ) ) {\r\n            return false;\r\n        }\r\n\r\n        if( airlinePersonnel.isPilot ) {\r\n\r\n            try {\r\n                airlineSystemStorage.getPilots().add( airlinePersonnel );\r\n            }\r\n            catch ( Throwable t ) {\r\n                return false;\r\n            }\r\n        } else {\r\n            try {\r\n                airlineSystemStorage.getCabin_crew().add( airlinePersonnel );\r\n            }\r\n            catch ( Throwable t ) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean addDestination(Destination destination) {\r\n        return airlineSystemStorage.getListOfDestination().add(destination);\r\n    }\r\n\r\n    @Override\r\n    public boolean removeDestination(Destination destination) {\r\n        return airlineSystemStorage.getListOfDestination().removeIf(ele ->ele.equals(destination));\r\n    }\r\n\r\n    /**\r\n     * Get a new aircraft.\r\n     * @param originAsCountry\r\n     * @return Not clear and specified.\r\n     */\r\n    @Override\r\n    public boolean add_aircraft( String originAsCountry ,Double wingspan,Double passengerCapacity,Double emptyWeightAsKg , Double maxFuelCapacity ) {\r\n\r\n        Aircraft temp = new Aircraft(null, originAsCountry, airlineSystemStorage.increment_Aircraft_counter()\r\n                ,  null,null, null,wingspan,passengerCapacity, emptyWeightAsKg, maxFuelCapacity);\r\n\r\n        if(passengerCapacity<0 || emptyWeightAsKg<0 || maxFuelCapacity>0)\r\n            return false;\r\n\r\n        for(Aircraft ele : airlineSystemStorage.getListOfAirCraft() ){\r\n            if(ele.equals(temp))\r\n                return false;\r\n        }\r\n\r\n        return airlineSystemStorage.getListOfAirCraft().add( temp );\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean remove_aircraft(Aircraft aircraft){\r\n        return airlineSystemStorage.getListOfAirCraft().removeIf(ele->ele.equals(aircraft));\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    public void addFlight(Destination target,int capacity,int price) {\r\n\r\n        if( airlineSystemStorage.ways.isEdge(0,airlineSystemStorage.dests.indexOf(target)));\r\n\r\n        String company = airlineSystemStorage.getNameOfTrademarkAsIdentifier();\r\n        String UAID_KEY = airlineSystemStorage.getUAID_KEY();\r\n        DateTime dateTime = new DateTime();\r\n        Aircraft aircraft;\r\n        // Collection<AirlinePersonnel> pilots, cabin_crew;\r\n\r\n        Flight flight = new Flight(company,UAID_KEY,airlineSystemStorage.dests.get(0),target,dateTime,capacity,price,assignPilot(),assingCabincrew());\r\n        try {\r\n            flight.setAircraft(assignAircraft(flight));\r\n\r\n        }catch (Exception e){\r\n            System.out.println(e);\r\n            removeFlight(flight);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    @Override\r\n    public boolean removeFlight(Flight flight) {\r\n        return airlineSystemStorage.getListOfFlight().removeIf(ele -> ele.equals(flight));\r\n    }\r\n\r\n    /**\r\n     * Sets the argument flight's to aircrafts static flight score,\r\n     * then re-calculate aircraft's score then sorts them according to\r\n     * this scores. In the end assigns the top value in the list to the\r\n     * given flight as aircraft\r\n     * @param flight Flight which we look up for most optimum aircraft\r\n     * @return the found aircraft if there are aircraft\r\n     * @throws Exception Throws an exception when there is no aircraft in the hangar\r\n     */\r\n    private Aircraft assignAircraft(Flight flight) throws Exception {\r\n        if(airlineSystemStorage.getListOfAirCraft().size()!=0){\r\n            Aircraft.setFlightScore(flight.getScore());\r\n            for(Aircraft ele:airlineSystemStorage.getListOfAirCraft())\r\n                ele.assignCompare();\r\n            airlineSystemStorage.getListOfAirCraft().sort(Aircraft.getComparator());\r\n            return airlineSystemStorage.getListOfAirCraft().get(0);\r\n        }\r\n        else\r\n            throw(new Exception(\"There is no aircraft in stock\"));\r\n\r\n    }\r\n\r\n    private List<AirlinePersonnel> assignPilot(){\r\n      List<AirlinePersonnel> pilots = new LinkedList<AirlinePersonnel>();\r\n\r\n      AirlinePersonnel temp = airlineSystemStorage.getPilots().poll();\r\n      pilots.add(temp);\r\n      airlineSystemStorage.getPilots().offer(temp);\r\n\r\n      temp = airlineSystemStorage.getPilots().poll();\r\n      pilots.add(temp);\r\n      airlineSystemStorage.getPilots().offer(temp);\r\n\r\n      return pilots;\r\n    }\r\n\r\n    private List<AirlinePersonnel> assingCabincrew(){\r\n        List<AirlinePersonnel> crew = new LinkedList<AirlinePersonnel>();\r\n\r\n        AirlinePersonnel temp = airlineSystemStorage.getCabin_crew().poll();\r\n        crew.add(temp);\r\n        airlineSystemStorage.getCabin_crew().offer(temp);\r\n\r\n        temp = airlineSystemStorage.getCabin_crew().poll();\r\n        crew.add(temp);\r\n        airlineSystemStorage.getCabin_crew().offer(temp);\r\n\r\n        return crew;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Airline/AirlineAdmin.java	(revision 56fd7a2287c9be165c664bc4c0c65bf6b329b0f5)
+++ src/Airline/AirlineAdmin.java	(date 1593019163046)
@@ -48,11 +48,9 @@
                     String perSSN = in.nextLine();
                     System.out.println("Please enter a password: ");
                     String perPass = in.nextLine();
-                    if(perName != null && perSurname!=null && !perName.equals("") && !perSurname.equals("")&& )
-                        AirlinePersonnel airlinePersonnel = new(perName,perSurname,)
-
-
-                    recruitPersonnel();
+//                    if(perName != null && perSurname!=null && !perName.equals("") && !perSurname.equals("")&& )
+//                        AirlinePersonnel airlinePersonnel = new(perName,perSurname)
+//                    recruitPersonnel();
                     break;
                 case 2:
                     break;
@@ -187,7 +185,7 @@
         if( airlineSystemStorage.ways.isEdge(0,airlineSystemStorage.dests.indexOf(target)));
 
         String company = airlineSystemStorage.getNameOfTrademarkAsIdentifier();
-        String UAID_KEY = airlineSystemStorage.getUAID_KEY();
+        String UAID_KEY = airlineSystemStorage.getNameOfTrademarkAsIdentifier();
         DateTime dateTime = new DateTime();
         Aircraft aircraft;
         // Collection<AirlinePersonnel> pilots, cabin_crew;
Index: src/Airport/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Airport;\r\n\r\nimport Airline.*;\r\nimport Client.Person;\r\nimport Client.User;\r\nimport Client.UserInterface;\r\nimport DataStructures.MapGraph;\r\n\r\n\r\nimport java.util.*;\r\n\r\n/**Customer class. Users can buy ticket here, see flights...*/\r\npublic class Customer extends User\r\n        implements UserInterface ,  CustomerInterface {\r\n\r\n    /**Ticket TreeMap. Uses integer values as key.*/\r\n    private TreeMap<Integer,Ticket> tickets;\r\n\r\n    /**compare to hold as Enum*/\r\n    static CustomerCompareTo customerCompareTo;\r\n\r\n    /**Social security number, stored as String.*/\r\n    private String SSN;\r\n\r\n    /**Password to log in, stored as String.*/\r\n    private String password;\r\n\r\n    /**Helps to reach AirportSystemStorage class' data.*/\r\n    AirportSystemStorage airportSystemStorage;\r\n\r\n    /** Customer constructor.\r\n     * @param name As the name of user.\r\n     * @param surname As the surname of user.\r\n     * @param SSN As the SSN of user.\r\n     * @param password As the password of the user, that helps logging in.\r\n     * @param airportSystemStorage As current airport to be in.\r\n     * @throws Exception if SSN is already used, or password is not valid.\r\n     * */\r\n    public Customer( String name , String surname , final String SSN , final String password\r\n            , final AirportSystemStorage airportSystemStorage ) throws Exception {\r\n\r\n        super( name , surname );\r\n        if(airportSystemStorage.isValidSSN(SSN)){\r\n            this.SSN = SSN;\r\n            if(password == null || password.equals(\"\"))\r\n                throw (new Exception(\"Given password is not proper!\"));\r\n            else{\r\n                this.password = password;\r\n                tickets = new TreeMap<>();\r\n                this.airportSystemStorage = airportSystemStorage;\r\n            }\r\n        }\r\n        else {\r\n            throw(new Exception(\"Given SSN is currently used!\"));\r\n        }\r\n\r\n        customerCompareTo = CustomerCompareTo.ACCORDING_TO_NAME;\r\n    }\r\n\r\n    public void menu(){\r\n\r\n        int choice;\r\n        Scanner in = new Scanner(System.in);\r\n        boolean loop = true,loop2 = true;\r\n\r\n\r\n        while(loop){\r\n\r\n            System.out.printf(\"1- Personal info menu \\n\");\r\n            System.out.printf(\"2- Change ssn\\n\");\r\n            System.out.printf(\"3- Change password.\\n\");\r\n            System.out.printf(\"4- Buy Tickets.\\n\");\r\n            System.out.printf(\"5- See your Tickets.\\n\");\r\n            System.out.printf(\"6- See all shops.\\n\");\r\n            System.out.printf(\"7- Exit.\\n\");\r\n\r\n            choice = in.nextInt();\r\n\r\n            switch (choice){\r\n                case 1:\r\n                    System.out.println(this);\r\n                    break;\r\n                case 2:\r\n                    System.out.println(\"Enter the new SSN value:\");\r\n                    String newSSN = in.nextLine();\r\n                    if(airportSystemStorage.getUserWithSSN(newSSN)==null)\r\n                        setSSN(newSSN);\r\n                    else\r\n                        System.out.println(\"Given SSN is currently hold by someone!.\");\r\n                    break;\r\n                case 3:\r\n                    System.out.println(\"Enter the new password\");\r\n                    String newPassword = in.nextLine();\r\n                    if(newPassword!=null && !newPassword.equals(\"\"))\r\n                        setPassword(newPassword);\r\n                    else\r\n                        System.out.println(\"Given password is empty!\");\r\n                    break;\r\n                case 4:\r\n                    loop2 = true;\r\n                    while (loop2){\r\n                        System.out.println(\"1- See all flights.\");\r\n                        System.out.println(\"2- Search a ticket using PNR.\");\r\n                        System.out.println(\"3- Buy a ticket.\");\r\n                        System.out.println(\"4- Exit.\");\r\n\r\n                        choice = in.nextInt();\r\n\r\n                        switch (choice){\r\n                            case 1:\r\n\r\n                                for(Map.Entry<String, Airline> ele: airportSystemStorage.getAirlines().entrySet()) {\r\n                                    System.out.println( \"\" + ele.getValue().getAirlineSystemStorage().getNameOfTrademarkAsIdentifier()\r\n                                            + \" Flights List : \");\r\n                                    for( Flight flight : ele.getValue().getAirlineSystemStorage().getListOfFlight() ) {\r\n                                        System.out.println( flight.customerShow() );\r\n                                    }\r\n                                    System.out.println();\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 2:\r\n\r\n                                System.out.print(\"Enter PNR : \");\r\n                                String PNR = in.nextLine();\r\n\r\n                                while ( PNR == null || PNR.equals(\"\") ) {\r\n                                    System.out.print(\"Enter PNR : \");\r\n                                    PNR = in.nextLine();\r\n                                }\r\n\r\n                                for( Map.Entry<Integer,Ticket> ele : tickets.entrySet() ) {\r\n                                    if( ele.getValue().equals( PNR )) {\r\n                                        System.out.println( ele.getValue().toString() );\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                break;\r\n\r\n                            case 3:\r\n                                for(Map.Entry<String, Airline> ele: airportSystemStorage.getAirlines().entrySet()) {\r\n                                    System.out.println( \"\" + ele.getValue().getAirlineSystemStorage().getNameOfTrademarkAsIdentifier()\r\n                                            + \" Flights List : \");\r\n                                    for( int i = 0 ; i < ele.getValue().getAirlineSystemStorage().getListOfFlight().size() ; ++i ) {\r\n                                        System.out.println( i + \"\" + ele.getValue().getAirlineSystemStorage().getListOfFlight().get(i) );\r\n                                    }\r\n                                    System.out.println();\r\n                                }\r\n\r\n                                System.out.print(\"Company Name : \");\r\n                                String companyName =  in.nextLine();\r\n\r\n                                while( companyName == null || companyName.equals(\"\") || airportSystemStorage.getAirlines().containsKey() ) {\r\n                                    System.out.print(\"Company Name : \");\r\n                                    companyName =  in.nextLine();\r\n                                }\r\n\r\n                                System.out.print(\"Flight Index : \");\r\n                                String index =  in.nextLine();\r\n\r\n                                while( index == null || index.equals(\"\") || !isNumeric( index )\r\n                                        || Integer.getInteger( index ) < 0 || Integer.getInteger( index ) > airportSystemStorage.getAirlines().get() ) {\r\n                                    System.out.print(\"FLight Index : \");\r\n                                    index =  in.nextLine();\r\n                                }\r\n\r\n                                Integer indexNumeric = Integer.getInteger( index );\r\n\r\n                                for(Map.Entry<String, Airline> ele: airportSystemStorage.getAirlines().entrySet()) {\r\n\r\n                                    if( ele.getValue().getAirlineSystemStorage().getNameOfTrademarkAsIdentifier().equals( companyName ) ) {\r\n                                        try {\r\n                                             ele.getValue().getAirlineSystemStorage().getListOfFlight().get( indexNumeric );\r\n                                        }\r\n                                        catch () {\r\n                                        }\r\n                                    }\r\n                                }\r\n\r\n\r\n                                break;\r\n\r\n                            case 4:\r\n                                loop2 = false;\r\n                                break;\r\n\r\n                            default:\r\n                                System.out.println(\"Error. Your input is invalid.\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    for(Map.Entry<Integer,Ticket> ele:tickets.entrySet())\r\n                        System.out.println(ele.getValue());\r\n                    break;\r\n                case 6:\r\n                    for(Place ele : airportSystemStorage.getPlaces())\r\n                        System.out.println(ele);\r\n                    break;\r\n                case 7: loop = false;\r\n                    break;\r\n                default: System.out.println(\"Error. Your input is invalid.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private static boolean isNumeric(String str) {\r\n        try {\r\n            Integer.parseInt(str);\r\n            return true;\r\n        } catch(Exception e){\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**get Method for tickets.\r\n     * @return tickets , as TreeMap.*/\r\n    public TreeMap<Integer, Ticket> getTickets() {\r\n        return tickets;\r\n    }\r\n\r\n    @Override\r\n    public String getSSN() {\r\n        return SSN;\r\n    }\r\n\r\n    @Override\r\n    public void setSSN(String SSN) {\r\n       this.SSN = SSN;\r\n    }\r\n\r\n    @Override\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    @Override\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n\r\n    @Override\r\n    public void displayFlights() {\r\n\r\n        airportSystemStorage.getFlights().forEach((k,v)->{\r\n            System.out.print(k+\"- \"+v.customerShow());\r\n        });\r\n\r\n    }\r\n\r\n    /**\r\n     * displayFlight method prints all flights avaiable.\r\n     * with order of flightCompareTo\r\n     *\r\n     * @param flightCompareTo\r\n     */\r\n    @Override\r\n    public void displayFlights(FlightCompareTo flightCompareTo) {\r\n        Flight.setFlightCompareTo(flightCompareTo);\r\n        TreeMap<Integer,Flight> sorted = new TreeMap<>();\r\n        airportSystemStorage.getFlights().forEach(sorted::put);\r\n        airportSystemStorage.setFlights(sorted);\r\n        displayFlights();\r\n    }\r\n\r\n    @Override\r\n    public Ticket buyTickets( Flight flight ) {\r\n\r\n        try {\r\n            return airportSystemStorage.getAirlines().get( flight.getUAID_KEY() ).createTicket(this,flight);\r\n        }catch (Exception e){\r\n            System.out.print(e);\r\n            return null;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public Flight searchWithPNR( final int PNR ) throws Exception {\r\n\r\n        if(airportSystemStorage.getFlights().containsKey(PNR))\r\n            return airportSystemStorage.getFlights().get(PNR);\r\n        throw(new Exception(\"Given PNR has no ticket, please check your information carefully!\"));\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n\r\n        if (this == o) return true;\r\n\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n\r\n        if (!super.equals(o)) return false;\r\n\r\n        Customer customer = (Customer) o;\r\n\r\n        return Objects.equals(SSN, customer.SSN);\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n\r\n        return Objects.hash(super.hashCode(), SSN);\r\n\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"Customer{\" +\r\n                \"tickets=\" + tickets +\r\n                \", SSN='\" + SSN + '\\'' +\r\n                \", password='\" + password + '\\'' +\r\n                '}';\r\n    }\r\n\r\n    /**Compare method that works with enums,\r\n     * because sometimes we want to compare them with surname,\r\n     * ticket number or SSN.\r\n     * @param person to compare.\r\n     * @return result of the comparison.*/\r\n    @Override\r\n    public int compareTo(Person person) {\r\n\r\n        Customer customer;\r\n\r\n        try {\r\n            customer = (Customer) person;\r\n        }\r\n        catch ( Exception e ) {\r\n            return 1;\r\n        }\r\n\r\n        switch ( customerCompareTo ) {\r\n\r\n            case ACCORDING_TO_SURNAME:\r\n                return this.getSurname().compareTo( customer.getSurname() );\r\n\r\n            case ACCORDING_TO_TICKET_NUMBER:\r\n                return Integer.compare(this.getTickets().size(), customer.getTickets().size());\r\n\r\n            case ACCORDING_TO_SSN:\r\n                return this.getSSN().compareTo( customer.getSSN() );\r\n\r\n            default:\r\n                return this.getName().compareTo( customer.getName() );\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To get Comparator for the sake of using sort algorithms.\r\n     * Switch structure used to determine which feature is\r\n     * gonna be used in sorting\r\n     * @return Comparator to make sorting\r\n     */\r\n    public static Comparator<Customer> getComparator(){\r\n        Comparator<Customer> comparator = new Comparator<Customer>(){\r\n            @Override\r\n            public int compare(Customer t0, Customer t1) {\r\n                switch (customerCompareTo){\r\n                    case ACCORDING_TO_SSN:\r\n                        return t0.getSSN().compareTo(t1.getSSN());\r\n                    default:\r\n                    case ACCORDING_TO_NAME:\r\n                        return t0.getName().compareTo(t1.getName());\r\n                    case ACCORDING_TO_SURNAME:\r\n                        return t0.getSurname().compareTo(t1.getSurname());\r\n                    case ACCORDING_TO_TICKET_NUMBER:\r\n                        return t0.getTickets().size()-t1.getTickets().size();\r\n                }\r\n            }\r\n        };\r\n        return comparator;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Airport/Customer.java	(revision 56fd7a2287c9be165c664bc4c0c65bf6b329b0f5)
+++ src/Airport/Customer.java	(date 1593019163068)
@@ -151,7 +151,7 @@
                                 System.out.print("Company Name : ");
                                 String companyName =  in.nextLine();
 
-                                while( companyName == null || companyName.equals("") || airportSystemStorage.getAirlines().containsKey() ) {
+                                while( companyName == null || companyName.equals("") || airportSystemStorage.getAirlines().containsKey(companyName) ) {
                                     System.out.print("Company Name : ");
                                     companyName =  in.nextLine();
                                 }
@@ -160,25 +160,11 @@
                                 String index =  in.nextLine();
 
                                 while( index == null || index.equals("") || !isNumeric( index )
-                                        || Integer.getInteger( index ) < 0 || Integer.getInteger( index ) > airportSystemStorage.getAirlines().get() ) {
+                                        || Integer.getInteger( index ) < 0 || Integer.getInteger( index ) > airportSystemStorage.getAirlines().get(companyName).getAirlineSystemStorage().getListOfFlight().size()) {
                                     System.out.print("FLight Index : ");
                                     index =  in.nextLine();
                                 }
 
-                                Integer indexNumeric = Integer.getInteger( index );
-
-                                for(Map.Entry<String, Airline> ele: airportSystemStorage.getAirlines().entrySet()) {
-
-                                    if( ele.getValue().getAirlineSystemStorage().getNameOfTrademarkAsIdentifier().equals( companyName ) ) {
-                                        try {
-                                             ele.getValue().getAirlineSystemStorage().getListOfFlight().get( indexNumeric );
-                                        }
-                                        catch () {
-                                        }
-                                    }
-                                }
-
-
                                 break;
 
                             case 4:
Index: src/Airport/AirportAdmin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Airport;\r\n\r\nimport Airline.*;\r\nimport Client.Person;\r\nimport Client.User;\r\nimport Client.UserInterface;\r\nimport DataStructures.Edge;\r\n\r\nimport java.util.Map;\r\nimport java.util.Objects;\r\nimport java.util.Scanner;\r\n\r\n/** AirportAdmin class for Admins of airport. Extended from Person Class.\r\n * This class administrates Airport business as flights, shops.. */\r\npublic class AirportAdmin extends User implements UserInterface , AirportAdminInterface {\r\n\r\n    /**Social security number, stored as String.*/\r\n    private String SSN;\r\n\r\n    /**Password to log in, stored as String.*/\r\n    private String password;\r\n\r\n    /**Helps to reach AirportSystemStorage class' data.*/\r\n    private AirportSystemStorage airportSystemStorage;\r\n\r\n    /** AirportAdmin constructor.\r\n     * @param name As the name of user.\r\n     * @param surname As the surname of user.\r\n     * @param password As the password of the user, that helps logging in.\r\n     * @param airportSystemStorage As current airport to be in.\r\n     * @param SSN As the SSN of the user.\r\n     * */\r\n    public AirportAdmin(String name , String surname , final String SSN , final String password\r\n            , final AirportSystemStorage airportSystemStorage  ) {\r\n\r\n        super(name, surname);\r\n\r\n\r\n        this.SSN = SSN;\r\n        this.password = password;\r\n\r\n        this.airportSystemStorage = airportSystemStorage;\r\n\r\n    }\r\n\r\n    public void menu(){\r\n\r\n        int choice;\r\n        Scanner in = new Scanner(System.in);\r\n        boolean loop = true, loop2 = true;\r\n\r\n\r\n        while(loop){\r\n            System.out.printf(\"1- Personal info menu \\n\");\r\n            System.out.printf(\"2- Set SSN\\n\");\r\n            System.out.printf(\"3- Set password.\\n\");\r\n            System.out.printf(\"4- Airline administration.\\n\");\r\n            System.out.printf(\"5- Airport Personnel administration.\\n\");\r\n            System.out.printf(\"6- Shop administration.\\n\");\r\n            System.out.printf(\"7- Destination administration.\\n\");\r\n            System.out.printf(\"8- Exit.\\n\");\r\n\r\n            choice = in.nextInt();\r\n\r\n            switch (choice){\r\n                case 1:\r\n                    System.out.println(this);\r\n                    break;\r\n                case 2:\r\n                    airportSystemStorage.changeSSNwithMenu(in);\r\n                    break;\r\n                case 3:\r\n                    airportSystemStorage.changePasswordwithMenu(in);\r\n                    break;\r\n                case 4:\r\n                    loop2 = true;\r\n                    while (loop2){\r\n                        System.out.printf(\"1- See all airlines.\\n\");\r\n                        System.out.printf(\"2- Add an airline.\\n\");\r\n                        System.out.printf(\"3- Remonve an airline.\\n\");\r\n                        System.out.printf(\"4- SetCommision.\\n\");\r\n                        System.out.printf(\"5- Exit.\\n\");\r\n\r\n                        choice = in.nextInt();\r\n\r\n                        switch (choice){\r\n                            case 1:\r\n                                for(Map.Entry<String,Airline> ele:airportSystemStorage.getAirlines().entrySet())\r\n                                    System.out.println(ele);\r\n                            case 2:\r\n                                break;\r\n                            case 3:\r\n                                break;\r\n                            case 4:\r\n                                break;\r\n                            case 5: loop2 = false;\r\n                                break;\r\n                            default: System.out.printf(\"Error. Your input is invalid..\\n\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case 5:\r\n                    loop2 = true;\r\n                    while (loop2){\r\n                        System.out.printf(\"1- Add an airport personnel.\\n\");\r\n                        System.out.printf(\"2- Remove an airport personnel.\\n\");\r\n                        System.out.printf(\"3- See all airport personnels.\\n\"); // eğer hepsini göstermek istemiyorsanız çıkarın.\r\n                        System.out.printf(\"4- Exit.\\n\");\r\n\r\n                        choice = in.nextInt();\r\n\r\n                        switch (choice){\r\n                            case 1:\r\n                                break;\r\n                            case 2:\r\n                                break;\r\n                            case 3:\r\n                                break;\r\n                            case 4: loop2 = false;\r\n                                break;\r\n                            default: System.out.printf(\"Error. Your input is invalid..\\n\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case 6:\r\n                    loop2 = true;\r\n                    while (loop2){\r\n                        System.out.printf(\"1- See all shops.\\n\");\r\n                        System.out.printf(\"2- Add a shop.\\n\");\r\n                        System.out.printf(\"3- Remove a shop.\\n\");\r\n                        System.out.printf(\"4- Exit.\\n\");\r\n\r\n                        choice = in.nextInt();\r\n\r\n                        switch (choice){\r\n                            case 1:\r\n                                break;\r\n                            case 2:\r\n                                break;\r\n                            case 3:\r\n                                break;\r\n                            case 4: loop2 = false;\r\n                                break;\r\n                            default: System.out.printf(\"Error. Your input is invalid..\\n\");\r\n                        }\r\n                    }\r\n                    break;\r\n                case 7: loop = false;\r\n                    break;\r\n                default: System.out.printf(\"Error. Your input is invalid..\\n\");\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addWay(Destination destination) throws Exception {\r\n        Edge e = new Edge(0,airportSystemStorage.destinations.indexOf(destination));\r\n        airportSystemStorage.ways.insertEdge(e);\r\n    }\r\n\r\n    @Override\r\n    public String getSSN() {\r\n        return SSN;\r\n    }\r\n\r\n    @Override\r\n    public void setSSN(String SSN) throws Exception {\r\n        if( SSN == null || SSN.equals( \"\" ) ) {\r\n            throw new Exception(\"SSN cannot be empty or null.\");\r\n        }\r\n        this.SSN = SSN;\r\n    }\r\n\r\n    @Override\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    @Override\r\n    public void setPassword(String password) throws Exception {\r\n        if( password == null || password.equals( \"\" ) ) {\r\n            throw new Exception(\"password cannot be empty or null.\");\r\n        }\r\n        this.password = password;\r\n    }\r\n\r\n    @Override\r\n    public boolean addAirportPersonnel( AirportPersonnel airportPersonnel) throws Exception {\r\n\r\n        if( airportPersonnel == null ) {\r\n            throw new Exception(\"AirportPersonnel cannot be null.\");\r\n        }\r\n\r\n        if( airportSystemStorage.airportPersonnel.contains( airportPersonnel ) ) {\r\n            return false;\r\n        } else {\r\n            airportSystemStorage.airportPersonnel.add( airportPersonnel );\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean removeAirportPersonnel(AirportPersonnel airportPersonnel) throws Exception {\r\n\r\n        if( airportPersonnel == null ) {\r\n            throw new Exception(\"AirportPersonnel cannot be null.\");\r\n        }\r\n\r\n        return airportSystemStorage.airportPersonnel.remove(airportPersonnel);\r\n    }\r\n\r\n    @Override\r\n    public boolean addShop(Shop shop) throws Exception {\r\n\r\n        if( shop == null ) {\r\n            throw new Exception(\"Shop cannot be null.\");\r\n        }\r\n\r\n        if( airportSystemStorage.places.contains( shop ) ) {\r\n            return false;\r\n        } else {\r\n            airportSystemStorage.places.add( shop );\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean removeShop(Shop shop) throws Exception {\r\n\r\n        if( shop == null ) {\r\n            throw new Exception(\"Shop cannot be null.\");\r\n        }\r\n\r\n        return airportSystemStorage.places.remove(shop);\r\n    }\r\n\r\n    @Override\r\n    public boolean addAirline(Airline airline) throws Exception {\r\n\r\n        if( airline == null ) {\r\n            throw new Exception(\"Airline cannot be null.\");\r\n        }\r\n\r\n        if( airportSystemStorage.airlines.containsValue( airline ) ) {\r\n            return false;\r\n        } else {\r\n            airportSystemStorage.airlines.put( airline.getUAID_KEY() , airline );\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean removeAirline(Airline airline) throws Exception {\r\n\r\n        if( airline == null ) {\r\n            throw new Exception(\"Airline cannot be null.\");\r\n        } else {\r\n            return airportSystemStorage.airlines.remove( airline.getUAID_KEY() , airline );\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public double getAirportFund() {\r\n        return airportSystemStorage.airportFund;\r\n    }\r\n\r\n    @Override\r\n    public boolean setCommissionRate( Airline airline , final double commissionRate ) throws Exception {\r\n\r\n        if( airline == null ) {\r\n            throw new Exception(\"Airline cannot be null.\");\r\n        }\r\n\r\n        if( commissionRate < 0 ) {\r\n            throw new Exception(\"Commission-Rate cannot be negative number.\");\r\n        }\r\n\r\n        if( !airportSystemStorage.airlines.containsValue( airline ) ) {\r\n            return false;\r\n        } else {\r\n            airline.setCommissionRate( commissionRate );\r\n            return true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean addDestination(Destination destination) throws Exception {\r\n\r\n        if( destination == null ) {\r\n            throw new Exception(\"Destination cannot be null.\");\r\n        }\r\n        else {\r\n            airportSystemStorage.destinations.add(destination);\r\n            return true;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean removeDestination(Destination destination) throws Exception {\r\n\r\n        if( destination == null ) {\r\n            throw new Exception(\"Destination cannot be null.\");\r\n        }\r\n        else {\r\n            airportSystemStorage.destinations.remove(destination);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object o) {\r\n\r\n        if (this == o) return true;\r\n\r\n        if (o == null || getClass() != o.getClass()) return false;\r\n\r\n        if (!super.equals(o)) return false;\r\n\r\n        AirportAdmin that = (AirportAdmin) o;\r\n\r\n        return SSN.equals(that.SSN);\r\n\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(super.hashCode(), SSN);\r\n    }\r\n\r\n    @Override\r\n    public String toString() {\r\n        return \"AirportAdmin{\" +\r\n                \"SSN='\" + SSN + '\\'' +\r\n                \", password='\" + password + '\\'' +\r\n                '}';\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Airport/AirportAdmin.java	(revision 56fd7a2287c9be165c664bc4c0c65bf6b329b0f5)
+++ src/Airport/AirportAdmin.java	(date 1593019163078)
@@ -245,7 +245,7 @@
         if( airportSystemStorage.airlines.containsValue( airline ) ) {
             return false;
         } else {
-            airportSystemStorage.airlines.put( airline.getUAID_KEY() , airline );
+            airportSystemStorage.airlines.put( airline.getAirlineSystemStorage().getNameOfTrademarkAsIdentifier() , airline );
             return true;
         }
 
@@ -257,7 +257,7 @@
         if( airline == null ) {
             throw new Exception("Airline cannot be null.");
         } else {
-            return airportSystemStorage.airlines.remove( airline.getUAID_KEY() , airline );
+            return airportSystemStorage.airlines.remove( airline.getNameofTradeMark() , airline );
         }
     }
 
